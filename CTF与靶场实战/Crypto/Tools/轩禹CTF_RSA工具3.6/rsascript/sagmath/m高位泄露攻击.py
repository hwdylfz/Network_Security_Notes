import libnum

def phase2(high_m, n, c):
    R.<x> = PolynomialRing(Zmod(n)) # 创建一个一元x多项式环
    m = high_m + x   # 创建 函数m
    M = m((m^3 - c).small_roots()[0]) # 求函数 m^3 - c == 0 时，m的值
    print(libnum.n2s(int(M)))

n= 87820675220050944276666536937178053591737658815392270191748297820779455516597258771409492985071487273959138596491450394909787320987214452112591216592868103533000899997083612075993361507842450673721035145566686926108394182525509613162304306962952268249573625177332604042538861617260231958301740214075681935343
c= 175676150266628477044547863316207684160605217337034900383232405043201220170812661001201665145601876056677303770107394852197299710055504906972519347399751760480691212376195591272076927976653900633077008728615420435215996366848329608393375750004585527972008314271549163796822007148758231284638062579980901
e= 3
m1= 56006392793428518694695623289788197038521915324616147480888796164523553483068585346206356005975568384

phase2(m1, n, c)
# b'flag{ca7e88b1-3d46-4a67-8727-d0e50e62ff97}'